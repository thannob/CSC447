import cv2
import numpy as np
img1c = cv2.imread("./image/cola.jpeg")
img1 = cv2.cvtColor(img1c,cv2.COLOR_BGR2GRAY)
img2c = cv2.imread("./image/coca-cola.jpg")
img2 = cv2.cvtColor(img2c,cv2.COLOR_BGR2GRAY)

sift = cv2.SIFT_create()

kp1, des1 = sift.detectAndCompute(img1, None)
kp2, des2 = sift.detectAndCompute(img2, None)
match = cv2.BFMatcher()
matches = match.knnMatch(des1,des2,k=2)
good = []
for m,n in matches:
    if m.distance < 0.5*n.distance:
        good.append(m)

matching_result = cv2.drawMatches(img1c,kp1,img2c,kp2,good,None)
cv2.imshow("Matching result", matching_result)
    
if len(good)>5:
    query_pts = np.float32([kp1[m.queryIdx].pt for m in good]).reshape(-1,1,2)
    train_pts = np.float32([kp2[m.trainIdx].pt for m in good]).reshape(-1,1,2)
    matrix, mask = cv2.findHomography(query_pts, train_pts, cv2.RANSAC, 5.0)
    matches_mask = mask.ravel().tolist()
    h, w = img1.shape
    pts = np.float32([[0,0],[0,h],[w,h],[w,0]]).reshape(-1,1,2)
    dst = cv2.perspectiveTransform(pts, matrix)
    homography = cv2.polylines(img2c,[np.int32(dst)],True, (255,0,0),2)
    cv2.imshow("Homography", homography)
cv2.waitKey(0)  
cv2.destroyAllWindows()
cv2.waitKey(1)
